chip level changes:
- make each component (dma, exti, etc.) inherit from common base
  - template type T for register layout struct
  - constructor accepts memory address of register struct
  - only stores pointer to struct, dereferences when accessing
  - common function that accepts pointer to register and value to set

stm32_dma:
 - DMA interrupt support
 - Support for multiple requests to a stream
 - These should probably be done by a DMA driver

stm32_pwr:
 - Power functions, e.g. configuring deep sleep, standby mode
 - Turning on/off peripherals

stm32_rtc:
 - More options for interrupts

stm32_syscfg:
 - Memory remapping to 0x00000000
 - PHY interface for Ethernet MAC

stm32_usart:
 - Interrupt support
 - USART-to-USART communication
 - USART input

components:
 - CRC
 - GPIO
 - ADC/DAC
 - Timers
 - Watchdogs
 - Cryptographic processor
 - RNG
 - HASH processor
 - I2C
 - SPI
 - SDIO
 - ETH
 - USB
 - FSMC
 - Debug controller

dma_driver:
 - Implement
 - Chooses highest prio request line that is available
 - Request lines freed on completion

pwr_driver:
 - Implement
 - Request peripherals to be turned on/off

mem_mgr:
 - Handle dynamic allocation
 - Handle large allocations e.g. for process creations
 - Handle MPU regions I guess?

flash_mgr:
 - Handle dynamic allocation of flash memory
 - some kind of file system

process_mgr:
 - No idea yet
 - Process creation, deletion, modification
 - Thread creation, deletion, modification
 - mutexes probably? might put that somewhere else

path_mgr:
 - Binding to paths, writing files, etc
 - Maybe don't need?

rsrc_mgr:
 - Managing hardware resources (ADC, USB, GPIO, CRC, etc.)
 - Might be handled by their respective drivers

system calls:
 - SVCallHandler needs to read immediate from PC and call necessary kernel function
 - Move context switcher into scheduler code
 - Abstract interrupt handler names? need to separate OS from HAL

std C lib:
 - all of it lol

OS/kernel init:
 - Will probably find out once I start implementing it

Misc:
 - Log function that serves as printf: formats and writes to usart

Makefile/build system:
 - Support to include/exclude certain parts of OS
 - Support for other platforms
   - Move linker script into cpu/platform folder
   - Create cpu.h or platform.h to contain cpu- or platform-specific info


